58: 1: PACKAGE THINKING_IN_JAVA.CHAPTER_18;
57: 2: 
56: 3: IMPORT NET.MINDVIEW.UTIL.BUFFEREDINPUTFILE;
55: 4: 
54: 5: IMPORT JAVA.IO.*;
53: 6: IMPORT JAVA.UTIL.LINKEDLIST;
52: 7: IMPORT JAVA.UTIL.LISTITERATOR;
51: 8: 
50: 9: PUBLIC CLASS EX12 {
49: 10: 
48: 11:     PUBLIC STATIC LINKEDLIST<STRING> FILETOLL(STRING F) THROWS IOEXCEPTION {
47: 12:         BUFFEREDREADER IN = NEW BUFFEREDREADER(NEW FILEREADER(F));
46: 13:         STRING S;
45: 14:         LINKEDLIST<STRING> LL = NEW LINKEDLIST<>();
44: 15: 
43: 16:         WHILE ((S = IN.READLINE())!= NULL) {
42: 17:             LL.ADD(S.TOUPPERCASE());
41: 18:         }
40: 19:         IN.CLOSE();
39: 20:         RETURN LL;
38: 21:     }
37: 22: 
36: 23:     PUBLIC STATIC LINKEDLIST<STRING> MATCHESARGS(LINKEDLIST<STRING> LINKEDLIST, STRING... P){
35: 24:         LINKEDLIST<STRING> MATCHESLL = NEW LINKEDLIST<>();
34: 25:         FOR (STRING S: LINKEDLIST) {
33: 26:             FOR(STRING D: S.SPLIT("\\W+")) {
32: 27:                 FOR (STRING M: P) {
31: 28:                     IF (D.MATCHES(M.TOUPPERCASE())) {
30: 29:                         IF (!MATCHESLL.CONTAINS(S)) {
29: 30:                             MATCHESLL.ADD(S);
28: 31:                         }
27: 32:                     }
26: 33:                 }
25: 34:             }
24: 35:         }
23: 36:         RETURN MATCHESLL;
22: 37:     }
21: 38: 
20: 39:     PUBLIC STATIC VOID PRINTREVERSELL (LINKEDLIST LINKEDLIST){
19: 40: 
18: 41:         FOR(LISTITERATOR<STRING> IT =
17: 42:             LINKEDLIST.LISTITERATOR(LINKEDLIST.SIZE()); IT.HASPREVIOUS();){
16: 43:             SYSTEM.OUT.PRINTLN(IT.PREVIOUS());
15: 44:         }
14: 45:     }
13: 46: 
12: 47:     PUBLIC STATIC VOID MAIN(STRING[] ARGS) THROWS IOEXCEPTION{
11: 48: 
10: 49:         STRING[] STRINGS = NEW STRING[(ARGS.LENGTH - 1)];
9: 50:         FOR(INT I = 1; I < ARGS.LENGTH; I++){
8: 51:             STRINGS[(I-1)] = ARGS[I];
7: 52:         }
6: 53:         PRINTREVERSELL(MATCHESARGS(FILETOLL(ARGS[0]), STRINGS));
5: 54: 
4: 55:     }
3: 56: 
2: 57: 
1: 58: }
